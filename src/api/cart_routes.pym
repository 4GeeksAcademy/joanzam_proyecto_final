from flask import Blueprint, request, jsonify
from flask_jwt_extended import jwt_required, get_jwt_identity
from api.models import db, Cart, Product

cart_routes = Blueprint('cart_routes', __name__)

# Obtener productos del carrito
@cart_routes.route('/', methods=['GET'])
@jwt_required()
def get_cart():
    user_id = get_jwt_identity()
    cart_items = Cart.query.filter_by(user_id=user_id).all()
    return jsonify([item.serialize() for item in cart_items]), 200

# Agregar un producto al carrito
@cart_routes.route('/', methods=['POST'])
@jwt_required()
def add_to_cart():
    user_id = get_jwt_identity()
    data = request.get_json()

    print(f"Datos recibidos: {data}")

    # Validar campos obligatorios
    product_id = data.get("product_id")
    quantity = data.get("quantity", 1)

    if not product_id or not isinstance(quantity, int) or quantity <= 0:
        return jsonify({"error": "Faltan campos obligatorios o formato inválido"}), 422

    # Verificar si el producto existe
    product = Product.query.get(product_id)
    if not product:
        return jsonify({"error": "Producto no encontrado"}), 404

    # Verificar si el producto ya está en el carrito
    cart_item = Cart.query.filter_by(user_id=user_id, product_id=product_id).first()
    if cart_item:
        cart_item.quantity += quantity
    else:
        cart_item = Cart(user_id=user_id, product_id=product_id, quantity=quantity)
        db.session.add(cart_item)

    db.session.commit()
    return jsonify(cart_item.serialize()), 201

# Eliminar un producto del carrito
@cart_routes.route('/<int:cart_item_id>', methods=['DELETE'])
@jwt_required()
def remove_from_cart(cart_item_id):
    cart_item = Cart.query.get(cart_item_id)
    if not cart_item:
        return jsonify({"error": "Producto no encontrado en el carrito"}), 404

    db.session.delete(cart_item)
    db.session.commit()
    return jsonify({"message": "Producto eliminado del carrito"}), 200
